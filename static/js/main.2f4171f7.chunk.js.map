{"version":3,"sources":["srgs.js","chartparser.js","runparser.js","grammars/commandGrammar.ts","dmSmartHome.ts","dmSearch.ts","dmAppointmentPlus.ts","dmAppointmentPro.ts","grammars/meetingGrammar.ts","dmColourChanger.ts","grammars/pizzaGrammar.ts","dmMenu.ts","grammars/menuGrammar.ts","index.tsx"],"names":["Grammar","root","this","$root","VOID","OneOf","NULL","GARBAGE","$check","i","checkSequenceExpansion","err","throwRuleError","Ref","ref","RefClass","Tag","tag","TagClass","alternatives","OneOfClass","Repeat","min","max","sequence","RepeatClass","ruleref","content","_string","toString","join","Infinity","message","error","undefined","TypeError","constructor","Array","name","String","checkExpansion","prototype","Number","LOG","str","clone","obj","temp","key","isEmpty","ob","hasOwnProperty","Chart","numberOfWords","passives","actives","add","edge","subchart","cat","isPassive","start","lhs","end","next","resultsForRule","results","finalEdges","push","out","allEdges","allPassiveEdges","concat","allActiveEdges","edges","j","k","statistics","length","nrEdges","nrPassiveEdges","nrActiveEdges","PassiveEdge","ActiveEdge","rest","rules","text","parse","words","grammar","filter","chart","agenda","leftCornerFilter","addToChart","inference","rhs","slice","SRGS","oneof","eval","position","leftCorners","pop","active","passive","loadGrammar","dom","DOMParser","parseFromString","ActiveXObject","doc","XML","newDocument","loadXML","url","encodeURIComponent","request","XMLHttpRequest","open","send","responseXML","parseXML","getElementsByTagName","getAttribute","xrules","r","xrule","processRuleExpansions","xitems","childNodes","rule","nodeType","textContent","trim","split","nodeName","uri","repeat","parseInt","console","log","gram","parseCmd","result","doing","action","command","thing","object","sayResponse","context","type","value","recResult","say","_context","dmMachine","id","initial","states","init","on","CLICK","welcomePrompt","RECOGNISED","target","cond","prompt","entry","ENDSPEECH","ask","stop","always","NotACommand","chore","saySnippet","snippet","welcome","actions","assign","query","promptAndAsk","invoke","src","event","duckQuery","fetch","Request","headers","then","data","json","onDone","AbstractText","onError","answer","cancel","sharedRecognitions","needHelp","promptMsg","question","prompt2","resetCounter","delay","promptAgain","count","nomatch","includes","person","weekday","time","yes_or_no","yes_no","help","goodbye","appointment","history","who","TIMEOUT","day","how_long","confirm_whole_day","what_time","confirm_with_time","done","parseMeeting","input","meeting","toLowerCase","whatsMissing","missing","knownSoFar","atTime","withPerson","onDay","promptEvent","restart","transit","askMore","final","sayYes","sayNo","sayColour","repaint","intent","smarthome","dmSmartHome","search","dmSearch","appointmentPlus","dmAppointmentPlus","appointmentPro","dmAppointmentPro","changecolour","dmColourChanger","inspect","iframe","machine","Machine","dm","asrtts","idle","LISTEN","SPEAK","ttsAgenda","recognising","exit","ASRRESULT","progress","match","speaking","recLogResult","test","logIntent","nluData","ReactiveButton","props","state","matches","className","style","animation","App","useSpeechSynthesis","onEnd","speak","useSpeechRecognition","onResult","listen","listening","useMachine","devTools","recStart","asEffect","interimResults","continuous","recStop","ttsStart","effect","ttsCancel","current","onClick","rootElement","document","getElementById","ReactDOM"],"mappings":"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","file":"static/js/main.2f4171f7.chunk.js","sourcesContent":["//\r\n//  srgs.js\r\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\r\n//\r\n/*\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU Lesser General Public License as published \r\n  by the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n  \r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n  \r\n  You should have received a copy of the GNU General Public License\r\n  and the GNU Lesser General Public License along with this program.  \r\n  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// encoding SRGS grammars in javascript\r\n\r\nexport function Grammar(root) {\r\n  this.$root = root;\r\n  \r\n  this.VOID = [OneOf([])];\r\n  this.NULL = [];\r\n  this.GARBAGE = []; \r\n  \r\n  this.$check = function() {\r\n    for (var i in this) {\r\n      if (i !== \"$root\" && i !== \"$check\") {\r\n\ttry {\r\n\t  checkSequenceExpansion(this[i]);\r\n\t} catch(err) {\r\n\t  throwRuleError(\"When checking grammar rule '\" + i + \"'\", err);\r\n\t}\r\n      }\r\n    }\r\n  }\r\n}\r\n\r\nexport function WordSet(str) {\r\n  var words = str.split(/ +/);\r\n  var set = {};\r\n  for (var i in words) {\r\n    set[words[i]] = true;\r\n  }\r\n  return set;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// rule expansion constructors\r\n\r\n// sequences are ordinary arrays\r\nexport function Sequence(seq) {\r\n  return seq;\r\n}\r\n\r\nexport function Ref(ref) {\r\n  return new RefClass(ref);\r\n}\r\n\r\nexport function Tag(tag) {\r\n  return new TagClass(tag);\r\n}\r\n\r\nexport function OneOf(alternatives) {\r\n  return new OneOfClass(alternatives);\r\n}\r\n\r\nexport function Repeat(min, max, sequence) {\r\n  return new RepeatClass(min, max, sequence);\r\n}\r\n\r\nexport function Optional(sequence) {\r\n  return new RepeatClass(0, 1, sequence);\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// rule expansion classes\r\n\r\nexport function RefClass(ruleref) {\r\n  this.content = ruleref;\r\n  this._string = \"$\" + ruleref;\r\n  this.toString = function toString() {return this._string}\r\n}\r\n    \r\nexport function TagClass(tag) {\r\n  this.content = tag;\r\n  this._string = \"{\" + tag + \"}\";\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\nexport function OneOfClass(alternatives) {\r\n  this.content = alternatives;\r\n  this._string = \"(\" + alternatives.join(\"|\") + \")\";\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\nexport function RepeatClass(min, max, sequence) {\r\n  this.min = min;\r\n  this.max = max;\r\n  this.content = sequence;\r\n  this._string = this.content + \"<\" + this.min + \"-\" + (this.max==Infinity ? \"\" : this.max) + \">\"\r\n  this.toString = function toString() {return this._string}\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// checking rule expansions\r\n\r\nexport function throwRuleError(message, error) {\r\n  if (error == undefined) {\r\n    throw TypeError(message);\r\n  } else {\r\n    throw TypeError(message + \"; \" + error.message);\r\n  }\r\n}\r\n\r\nexport function checkSequenceExpansion(sequence) {\r\n  try {\r\n    if (sequence.constructor !== Array) {\r\n      throwRuleError(\"Expected Array, found \" + sequence.constructor.name);\r\n    }\r\n    for (var i in sequence) {\r\n      if (sequence[i].constructor == Array) {\r\n\tcheckSequenceExpansion(sequence[i]);\r\n      } else if (sequence[i].constructor != String) {\r\n\tsequence[i].checkExpansion();\r\n      }\r\n    }\r\n  } catch(err) {\r\n    throwRuleError(\"When checking sequence expansion\", err);\r\n  }\r\n};\r\n\r\nRefClass.prototype.checkExpansion = function checkExpansion() {\r\n  if (this.content.constructor !== String) {\r\n    throwRuleError(\"When checking Ref content; Expected String, found \" + this.content.constructor.name);\r\n  }\r\n};\r\n\r\nTagClass.prototype.checkExpansion = function checkExpansion() {\r\n  if (this.content.constructor !== String) {\r\n      throwRuleError(\"When checking Tag content; Expected String, found \" + this.content.constructor.name);\r\n  }\r\n};\r\n\r\nOneOfClass.prototype.checkExpansion = function checkExpansion() {\r\n  try {\r\n    if (this.content.constructor !== Array) {\r\n      throwRuleError(\"Expected Array, found \" + this.content.constructor.name);\r\n    }\r\n    for (var i in this.content) {\r\n      checkSequenceExpansion(this.content[i]);\r\n    }\r\n  } catch(err) {\r\n    throwRuleError(\"When checking OneOf content\", err);\r\n  }\r\n};\r\n\r\nRepeatClass.prototype.checkExpansion = function checkExpansion() {\r\n  try {\r\n    if (this.min.constructor !== Number || this.max.constructor !== Number) {\r\n      throwRuleError(\"Expected min/max to be Number, found \" + this.min.constructor.name + \"/\" + this.max.constructor.name);\r\n    }\r\n    if (!(0 <= this.min && this.min <= this.max)) {\r\n      throwRuleError(\"Expected 0 <= min <= max, found \" + this.min + \"/\" + this.max);\r\n    }\r\n    checkSequenceExpansion(this.content);\r\n  } catch(err) {\r\n    throwRuleError(\"When checking Repeat content\", err);\r\n  }\r\n};\r\n\r\n","//\r\n//  chartparser.js\r\n//  Copyright (C) 2009, Peter Ljunglöf. All rights reserved.\r\n//\r\n/*\r\n  This program is free software: you can redistribute it and/or modify\r\n  it under the terms of the GNU Lesser General Public License as published \r\n  by the Free Software Foundation, either version 3 of the License, or\r\n  (at your option) any later version.\r\n  \r\n  This program is distributed in the hope that it will be useful,\r\n  but WITHOUT ANY WARRANTY; without even the implied warranty of\r\n  MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\r\n  GNU General Public License for more details.\r\n  \r\n  You should have received a copy of the GNU General Public License\r\n  and the GNU Lesser General Public License along with this program.  \r\n  If not, see <http://www.gnu.org/licenses/>.\r\n*/\r\n\r\n/* Mods by Torbjörn\r\n- Removed the toString() method from Object. Why does it still work?\r\n- Added a text variable (similar to rules). See \r\n*/\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// a logging function\r\n//  - uncomment if you want to debug the parsing process\r\nfunction LOG(str) {\r\n  //console.log(\"\" + str);\r\n}\r\n\r\nimport * as SRGS from './srgs'\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// we need to be able to clone objects between different edges\r\n// borrowed from http://keithdevens.com/weblog/archive/2007/Jun/07/javascript.clone\r\nfunction clone(obj){\r\n  if (obj == null || typeof(obj) != 'object') {\r\n    return obj;\r\n  }\r\n  var temp = new obj.constructor(); \r\n  for (var key in obj) {\r\n    temp[key] = clone(obj[key]);\r\n  }\r\n  return temp;\r\n}\r\n\r\n\r\nfunction isEmpty(ob){\r\n   for (var i in ob) { if(ob.hasOwnProperty(i)) {return false;}}\r\n  return true;\r\n}\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// parse chart\r\n// conceptually this is a set of edges, but it is optimized\r\nfunction Chart(numberOfWords) {\r\n  this.numberOfWords = numberOfWords;\r\n  this.passives = new Array(numberOfWords);\r\n  this.actives = new Array(numberOfWords);\r\n  for (var i = 0; i <= numberOfWords; i++) {\r\n    this.passives[i] = {};\r\n    this.actives[i] = {};\r\n  }\r\n\r\n  // Chart.add(edge)\r\n  // add the edge to the chart, return true if the chart was changed \r\n  // (i.e. if the chart didn't already contain the edge)\r\n  this.add = function add(edge) {\r\n    var subchart, cat;\r\n    if (edge.isPassive) {\r\n      subchart = this.passives[edge.start];\r\n      cat = edge.lhs;\r\n    } else {\r\n      subchart = this.actives[edge.end];\r\n      cat = edge.next.content;\r\n    }\r\n    if (!(cat in subchart)) {\r\n      subchart[cat] = {};\r\n    }\r\n    if (edge in subchart[cat]) {\r\n      return false;\r\n    } else {\r\n      subchart[cat][edge] = edge;\r\n      return true;\r\n    }\r\n  }\r\n\r\n  // Chart.resultsForRule(lhs, start, end)\r\n  // return all parse results for the given lhs, start, and end\r\n  //  - start, end are optional; defaults to 0, numberOfWords\r\n  this.resultsForRule = function resultsForRule(lhs, start, end) {\r\n    start = start || 0;\r\n    end = end || numberOfWords;\r\n    var results = [];\r\n    var finalEdges = this.passives[start][lhs];\r\n    for (var i in finalEdges) {\r\n      if (finalEdges[i].end == end) {\r\n\tresults.push(finalEdges[i].out);\r\n      }\r\n    }\r\n    return results;\r\n  }\r\n  \r\n  // Chart.allEdges() / Chart.allPassiveEdges() / Chart.allActiveEdges()\r\n  // return an array of all (passive/active) edges in the chart\r\n  this.allEdges = function allEdges() {\r\n    return this.allPassiveEdges().concat(this.allActiveEdges());\r\n  }\r\n  this.allPassiveEdges = function allPassiveEdges() {\r\n    var edges = [];\r\n    for (var i in this.passives) \r\n      for (var j in this.passives[i]) \r\n\tfor (var k in this.passives[i][j])\r\n\t  edges.push(this.passives[i][j][k]);\r\n    return edges;\r\n  }\r\n  this.allActiveEdges = function allActiveEdges() {\r\n    var edges = [];\r\n    for (var i in this.actives) \r\n      for (var j in this.actives[i]) \r\n\tfor (var k in this.actives[i][j])\r\n\t  edges.push(this.actives[i][j][k]);\r\n    return edges;\r\n  }\r\n\r\n  // Chart.statistics()\r\n  // return the number of edges in the chart\r\n  this.statistics = function statistics() {\r\n    var passives = this.allPassiveEdges().length;\r\n    var actives = this.allActiveEdges().length;\r\n    return {nrEdges: passives+actives, nrPassiveEdges: passives, nrActiveEdges: actives};\r\n  }\r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// parse edges: passive and active\r\n\r\nfunction PassiveEdge(start, end, lhs, out) {\r\n  this.start = start;\r\n  this.end = end;\r\n  this.lhs = lhs;\r\n  this.out = out;\r\n  this.isPassive = true;\r\n\r\n  var str = \"[\" + start + \"-\" + end + \"] $\" + lhs + \" := \" + out;\r\n  this._string = str;\r\n  this.toString = function toString() {return this._string;} \r\n}\r\n\r\nfunction ActiveEdge(start, end, lhs, next, rest, out, rules, text) {\r\n  this.start = start;\r\n  this.end = end;\r\n  this.lhs = lhs;\r\n  this.next = next;\r\n  this.rest = rest;\r\n  this.out = out;\r\n  this.rules = rules;\r\n  this.text = text;\r\n  this.isPassive = false;\r\n\r\n  var str = \"<\" + start + \"-\" + end + \"> $\" + lhs + \" -> \" + next + \r\n    \", \" + rest + \" := \" + out + \" <- \" + rules;\r\n  this._string = str;\r\n  this.toString = function toString() {return this._string;} \r\n}\r\n\r\n\r\n//////////////////////////////////////////////////////////////////////\r\n// the main parsing function: a simple top-down chartparser\r\n//  - 'words' is an array of strings\r\n//  - 'grammar' is a hash table of left-hand-sides mapping to arrays of right-hand-sides\r\n//  - 'root' is the starting category (a string)\r\n//    if unspecified, use the '$root' property of the grammar\r\n//  - 'filter' is an optional left-corner filter \r\n//    (a mapping from categories/rule-refs to words)\r\n//    if specified, it is used when predicting new edges\r\n// returns the final chart\r\nexport function parse(words, grammar, root, filter) {\r\n  if (!root) {\r\n    root = grammar.$root;\r\n  }\r\n  var chart = new Chart(words.length);\r\n  var agenda = [];\r\n\r\n  var leftCornerFilter;\r\n  if (filter == undefined) {\r\n    leftCornerFilter = function() {return true};\r\n  } else {\r\n    leftCornerFilter = function leftCornerFilter(ruleref, position) {\r\n      var leftCorners = filter[ruleref];\r\n      return leftCorners ? words[position] in leftCorners : true;\r\n    }\r\n  }\r\n  \r\n  // add an edge to the chart and the agenda, if it does not already exist\r\n  function addToChart(inference, start, end, lhs, rhs, out, rules, text) {\r\n    var edge;\r\n    if (rhs.length > 0) {\r\n      var next = rhs[0];\r\n      var rest = rhs.slice(1);\r\n      switch (next.constructor) {\r\n\t\r\n      case Array:\r\n\t// the next symbol is a sequence\r\n\taddToChart(inference+\",SEQUENCE\", start, end, lhs, next.concat(rest), out, rules, text);\r\n\treturn;\r\n\t\r\n      case SRGS.RepeatClass:\r\n\t// the next symbol is a repetition\r\n\tvar min = next.min;\r\n\tvar max = next.max;\r\n\t// skip repeat \r\n\tif (min <= 0) {\r\n\t  addToChart(inference+\",SKIP\", start, end, lhs, rest, out, rules, text);\r\n\t}\r\n\t// repeat \r\n\tif (max > 0) {\r\n\t  var content = next.content;\r\n\t  var rhs = (max==1 ? [content] : [content, SRGS.Repeat(min ? min-1 : min, max-1, content)]);\r\n\t  addToChart(inference+\",REPEAT\", start, end, lhs, rhs.concat(rest), out, rules, text);\r\n\t}\r\n\treturn;\r\n\t\r\n      case SRGS.OneOfClass:\r\n\t// the next symbol is a disjunction\r\n\tvar oneof = next.content;\r\n\tfor (var i in oneof) {\r\n\t  var rhs = oneof[i].concat(rest);\r\n\t  addToChart(inference+\",ONEOF\", start, end, lhs, rhs, out, rules, text);\r\n\t} \r\n\treturn;\r\n\t\r\n      case SRGS.TagClass:\r\n\t// the next symbol is a semantic action\r\n\tout = clone(out);\r\n\trules = clone(rules);\r\n\teval(next.content);\r\n\taddToChart(inference+\",TAG\", start, end, lhs, rest, out, rules, text);\r\n\treturn;\r\n      }\r\n\r\n      edge = new ActiveEdge(start, end, lhs, next, rest, out, rules, text);\r\n    } else {\r\n      edge = new PassiveEdge(start, end, lhs, out);\r\n    }\r\n    \r\n    // try to add the edge; if successful, also add it to the agenda\r\n    if (chart.add(edge)) {\r\n      LOG(\"+ \" + inference + \": \" + edge);\r\n      agenda.push(edge);\r\n    }\r\n  }\r\n  \r\n  // seed the agenda with the starting rule\r\n  addToChart(\"INIT\", 0, 0, root, grammar[root], {}, {}, {});\r\n  \r\n  // main loop\r\n  while (agenda.length > 0) {\r\n    var edge = agenda.pop();\r\n    var start= edge.start;\r\n    var end  = edge.end;\r\n    var lhs  = edge.lhs;\r\n    var next = edge.next;\r\n    LOG(edge);\r\n\r\n    if (edge.isPassive) {\r\n      // combine\r\n      var actives = chart.actives[start][lhs];\r\n      for (var i in actives) {\r\n\tvar active = actives[i];\r\n\tvar rules = clone(active.rules);\r\n\tvar text = active.text;\r\n\ttext[edge.lhs] = words.slice(start, end).join(\" \");\r\n\tif (typeof edge.out == 'object' && isEmpty(edge.out)) {\r\n\t    rules[edge.lhs] = text[edge.lhs];\r\n\t} else {\r\n        rules[edge.lhs] = clone(edge.out);\r\n    }\r\n\taddToChart(\"COMBINE\", active.start, end, active.lhs, active.rest, active.out, rules, text);\r\n      }\r\n\r\n    } else if (next.constructor == SRGS.RefClass) {\r\n      var ref = next.content;\r\n      // combine\r\n      var passives = chart.passives[end][ref];\r\n      for (var i in passives) {\r\n\tvar passive = passives[i];\r\n\tvar rules = clone(edge.rules);\r\n\tvar text = edge.text;\r\n\trules[passive.lhs] = clone(passive.out);\r\n\ttext[passive.lhs] = passive.text;\r\n\taddToChart(\"COMBINE\", start, passive.end, lhs, edge.rest, edge.out, rules, text);\r\n      }\r\n      // predict\r\n      if (ref in grammar) {\r\n\tif (leftCornerFilter(ref, end)) {\r\n\t  addToChart(\"PREDICT\", end, end, ref, grammar[ref], {}, {}, {});\r\n\t}\r\n      }\r\n\r\n    } else if (next == words[end]) {\r\n      // scan\r\n      addToChart(\"SCAN\", start, end+1, lhs, edge.rest, edge.out, edge.rules, edge.text);\r\n    }\r\n  }\r\n\r\n  return chart;\r\n}\r\n\r\n\r\n","//\r\n//  runparser.js\r\n//\r\n/*\r\n  The author or authors of this code dedicate any and all \r\n  copyright interest in this code to the public domain.\r\n*/\r\n\r\n\r\n// helper functions for the parser demo\r\n\r\nimport * as SRGS from './srgs'\r\n\r\nfunction getElement(id) {\r\n  return document.getElementById(id);\r\n}\r\n\r\nfunction appendElement(parent, element, text) {\r\n  var elem = document.createElement(element);\r\n  if (text)\r\n    elem.appendChild(document.createTextNode(text));\r\n  parent.appendChild(elem);\r\n  return elem\r\n}\r\n\r\nfunction runParser(input) {\r\n  var resultsDiv = getElement(\"results\");\r\n  resultsDiv.innerHTML = \"\";\r\n  var maybeFilter;\r\n  if (getElement(\"usefilter\") && getElement(\"usefilter\").checked) {\r\n    maybeFilter = filter;\r\n    appendElement(resultsDiv, \"EM\", \"Using left-corner filter\");\r\n  }\r\n  var startTime = new Date();\r\n  var parseChart = parse(input, grammar, grammar.$root, maybeFilter);\r\n  var parseTime = new Date() - startTime;\r\n  var parseResults = parseChart.resultsForRule(grammar.$root);\r\n  \r\n  console.log(parseResults[0]);\r\n  \r\n  if (parseResults) {\r\n    for (var i in parseResults) {\r\n        resultsDiv.innerHTML += display(parseResults[i],\"\");\r\n    }\r\n  } else {\r\n    appendElement(resultsDiv, \"P\", \"No results found!\");\r\n  }\r\n  \r\n/*\r\n  if (parseResults) { \r\n    var resultList = appendElement(resultsDiv, \"OL\");\r\n    for (var i in parseResults) \r\n      appendElement(resultList, \"LI\", JSON.stringify(parseResults[i]));\r\n  } else {\r\n    appendElement(resultsDiv, \"P\", \"No results found!\");\r\n  }\r\n*/\r\n  var statistics = parseChart.statistics()\r\n  appendElement(resultsDiv, \"P\", \"Chart size: \" + statistics.nrEdges + \" edges\" +\r\n\t\t\" (\" + statistics.nrPassiveEdges + \" passive)\");\r\n  appendElement(resultsDiv, \"P\", \"Parse time: \" + parseTime + \" ms\" + \r\n\t\t\" (\" + (parseTime / statistics.nrEdges).toFixed(2) + \" ms/edge)\");\r\n}\r\n\r\nfunction runWordParser() {\r\n  runParser(getElement(\"input\").value.split(/\\s+/));\r\n}\r\n\r\nfunction runCharacterParser() {\r\n  runParser(getElement(\"input\").value.split(\"\"));\r\n}\r\n\r\nexport function loadGrammar(str) {\r\n    var dom = parseXML(str);\r\n    var root = dom.getElementsByTagName(\"grammar\")[0].getAttribute(\"root\");\r\n    var grammar = new SRGS.Grammar(root);\r\n    var xrules = dom.getElementsByTagName(\"rule\");\r\n    for(var r=0; r < xrules.length; r++) {\r\n        var xrule = xrules[r];\r\n        var id = xrule.getAttribute(\"id\");\r\n        grammar[id] = processRuleExpansions(xrule);\r\n    }\r\n    return grammar;\r\n}\r\n\r\nfunction processRuleExpansions(xrule) {\r\n    var xitems = xrule.childNodes;\r\n    var rule = [];\r\n    for(var i=0; i < xitems.length; i++) {\r\n        if (xitems[i].nodeType == 3) {\r\n            var str = xitems[i].textContent.trim();\r\n            if (str != \"\") {\r\n                rule.push(str.split(/ +/));\r\n            }\r\n        } else if (xitems[i].nodeType == 1) {\r\n            if (xitems[i].nodeName == \"token\") {\r\n                rule.push(SRGS.Tag(xitems[i].textContent));\r\n            } else if (xitems[i].nodeName == \"ruleref\") {\r\n                var uri = xitems[i].getAttribute(\"uri\");\r\n                rule.push(SRGS.Ref(uri.slice(1)));\r\n            } else if (xitems[i].nodeName == \"tag\") {\r\n                rule.push(SRGS.Tag(xitems[i].textContent.trim()));\r\n            } else if (xitems[i].nodeName == \"one-of\") {\r\n                rule.push(SRGS.OneOf(processRuleExpansions(xitems[i])));\r\n            } else if (xitems[i].nodeName == \"item\") {\r\n                var repeat = xitems[i].getAttribute(\"repeat\");\r\n                if (!repeat) {\r\n                    rule.push(processRuleExpansions(xitems[i]));\r\n                } else {\r\n                    var r = repeat.split(\"-\");\r\n                    var min = parseInt(r[0]);\r\n                    var max = parseInt(r[1]);\r\n                    max = (max) ? max : Infinity;\r\n                    rule.push(SRGS.Repeat(min, max, processRuleExpansions(xitems[i])));\r\n                }\r\n            } else {\r\n                console.log(xitems[i]);\r\n            }\r\n        }\r\n    }\r\n\treturn rule;\r\n}\r\n\r\nfunction parseXML(text) {\r\n    if (typeof DOMParser != \"undefined\") {\r\n        // Mozilla, Firefox, and related browsers\r\n        return (new DOMParser()).parseFromString(text, \"application/xml\");\r\n    }\r\n    else if (typeof ActiveXObject != \"undefined\") {\r\n        // Internet Explorer.\r\n        var doc = XML.newDocument();  // Create an empty document\r\n        doc.loadXML(text);            // Parse text into it\r\n        return doc;                   // Return it\r\n    }\r\n    else {\r\n        // As a last resort, try loading the document from a data: URL\r\n        // This is supposed to work in Safari. Thanks to Manos Batsis and\r\n        // his Sarissa library (sarissa.sourceforge.net) for this technique.\r\n        var url = \"data:text/xml;charset=utf-8,\" + encodeURIComponent(text);\r\n        var request = new XMLHttpRequest();\r\n        request.open(\"GET\", url, false);\r\n        request.send(null);\r\n        return request.responseXML;\r\n    }\r\n};\r\n","/*\r\n  root $mycommand;\r\n  $mycommand = [please] $commandA | $commandB [please];\r\n  \r\n  $commandA = $actionA the $objectA; //electricals\r\n  $commandB = $actionB the $objectB; //house openings\r\n  \r\n  $actionA = turn on | turn off;\r\n  $objectA = AC{out='air conditioning'} | light | heat;\r\n  \r\n  $actionB = open | close;\r\n  $objectB = window | door\r\n\r\n*/\r\n\r\nexport const grammar = `\r\n<grammar root=\"mycommand\">\r\n  <rule id=\"mycommand\">\r\n\r\n    <!--Polite expressions before-->\r\n    <item repeat=\"0-1\">can you</item><item repeat=\"0-1\">could you</item><item repeat=\"0-\">please</item> \r\n    \r\n    <one-of> \r\n        <!--Make object with 2 properties from either of \" ___ the XXX\" commands -->\r\n\r\n        <item> \r\n           <ruleref uri=\"#commandA\"/> \r\n           <tag>\r\n             out.command=new Object();\r\n             out.command.action= rules.commandA.action; \r\n             out.command.object=rules.commandA.object;\r\n           </tag>\r\n        </item> \r\n\r\n        <item> \r\n           <ruleref uri=\"#commandB\"/>         \r\n           <tag>\r\n             out.command=new Object();\r\n             out.command.action= rules.commandB.action; \r\n             out.command.object=rules.commandB.object;\r\n           </tag>\r\n        </item> \r\n    </one-of>\r\n\r\n    <!--Polite expressions after-->\r\n    <item repeat=\"0-\">please</item><item repeat=\"0-\">thanks</item> <item repeat=\"0-\">thank you</item>\r\n  </rule> \r\n\r\n\r\n   <!--Electricals-->\r\n   <rule id=\"commandA\"> \r\n      <ruleref uri=\"#actionA\"/> the <ruleref uri=\"#objectA\"/>\r\n      <tag>\r\n           out.action= rules.actionA; \r\n           out.object=rules.objectA;\r\n      </tag>\r\n   </rule>\r\n   \r\n   <!-- House openings -->\r\n   <rule id=\"commandB\">  \r\n      <ruleref uri=\"#actionB\"/> the <ruleref uri=\"#objectB\"/>\r\n      <tag>\r\n           out.action= rules.actionB; \r\n           out.object=rules.objectB;\r\n      </tag>\r\n   </rule>\r\n\r\n<rule id=\"actionA\"> \r\n    <one-of>  \r\n        <item> turn on <tag> out='on'; </tag></item>     <item> switch on <tag> out='on'; </tag></item>\r\n        <item> turn off <tag> out='off'; </tag></item>   <item> switch off <tag> out='off'; </tag></item>\r\n    </one-of>\r\n</rule>\r\n<rule id=\"objectA\"> \r\n    <one-of> \r\n        <item> light </item> <item> lights <tag> out = 'light'; </tag></item> \r\n        <item> heat </item> \r\n        <item> AC <tag> out = 'air conditioning'; </tag></item>   <item> air conditioning </item>  \r\n    </one-of> \r\n</rule>\r\n\r\n<rule id=\"actionB\"> \r\n    <one-of>  \r\n        <item> open </item> \r\n        <item> close </item> \r\n    </one-of> \r\n</rule>\r\n<rule id=\"objectB\"> \r\n    <one-of> \r\n        <item> window </item> \r\n        <item> door </item> \r\n    </one-of> \r\n</rule>\r\n   \r\n</grammar>\r\n`\r\n","import { MachineConfig, send, Action } from \"xstate\";\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/commandGrammar'\r\n\r\nconst gram = loadGrammar(grammar)\r\n\r\n// function paeseCmd() returns formatted str containing .action & .object values\r\nlet parseCmd: (text:string) => string = function (\r\n    text: string,\r\n  ): string {\r\n    let prs = parse(text.split(/\\s+/), gram)\r\n    let result = prs.resultsForRule(gram.$root)[0]\r\n    let message;\r\n    if (result===undefined)\r\n        {message='NotCommand'}\r\n    else\r\n        {let action = result.command.action\r\n        let thing = result.command.object\r\n        let doing;\r\n            if(action==='on'){doing='turning on'} if(action==='off'){doing='turning off'}\r\n            if(action==='open'){doing='opening'} if(action==='close'){doing='closing'}\r\n        message = `Sure, ${doing} the ${thing}.`}\r\n    return message ;\r\n  };\r\n\r\n// let input1 = \"close the AC please\"\r\n// let input2 = \"turn off the AC please\"\r\n// console.log(parseCmd(input1))\r\n// console.log(parseCmd(input2)) \r\n\r\n\r\nconst sayResponse: Action<SDSContext, SDSEvent> = send((context: SDSContext) => (\r\n    {type: \"SPEAK\", value: parseCmd(context.recResult)}\r\n))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    console.log(`>>Saying: ${text}`)\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    id: 'SmartHome',\r\n    initial: 'welcomePrompt',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcomePrompt'\r\n            }\r\n        },\r\n        \r\n\r\n        welcomePrompt: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\r\n                    { target: 'NotACommand', cond: (context) => parseCmd(context.recResult) === 'NotCommand'},\r\n                    { target: 'chore', cond: (context) => parseCmd(context.recResult) != 'NotCommand'},\r\n                    ],\r\n                CLICK: 'stop'\r\n                },\r\n            ...promptAndAsk(\"Please say your smart home command\")\r\n            },\r\n        stop: {\r\n            entry: say(\"Ok, stopped\"),\r\n            always: 'init'\r\n            },\r\n        NotACommand: {\r\n            entry: say(\"Sorry, I dont know how to do that.\"),\r\n            on: { ENDSPEECH: \"welcomePrompt\" }\r\n            },\r\n        chore: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: sayResponse,\r\n                    on: { ENDSPEECH: '#root.dm.init' } //init of dmMenu\r\n                    },\r\n                \r\n                }\r\n            }\r\n    }\r\n})\r\n","import { MachineConfig, send, assign, Action } from \"xstate\";\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nconst saySnippet: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `${context.snippet}`\r\n}))\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN')\r\n}\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n\tinitial: 'prompt',\r\n\tstates: {\r\n            prompt: {\r\n\t\tentry: say(prompt),\r\n\t\ton: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n\t\tentry: send('LISTEN'),\r\n            },\r\n\t}})\r\n}\r\n\r\nconst proxyUrl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst duckQuery = (query: string) =>\r\n    fetch(new Request(proxyUrl+`https://api.duckduckgo.com/?q=${query}&format=json&skip_disambig=1`,\r\n\t\t      {headers: { 'Origin': 'http://localhost:3000' }})).then(data => data.json());\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    id: 'Search',\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n\twelcome: {\r\n\t    on: {\r\n\t\tRECOGNISED: {\r\n\t\t    target: 'query',\r\n\t\t    actions: assign((context) => { return { query: context.recResult } }),\r\n                }\r\n            },\r\n\t    ...promptAndAsk(\"What are you looking for?\")\r\n\t},\r\n\tquery: {\r\n\t    invoke: {\r\n\t\tid: 'duck',\r\n                src: (context, event) => duckQuery(context.query),\r\n                onDone: {\r\n                    target: 'answer',\r\n                    actions: [assign((context, event) => { return {snippet: event.data.AbstractText }}),\r\n\t\t\t      (context:SDSContext, event:any) => console.log(event.data)]\r\n                },\r\n\t\tonError: {\r\n                    target: 'welcome',\r\n\t\t    actions: (context,event) => console.log(event.data)\r\n                }\r\n            }\r\n\t},\r\n        answer: {\r\n\t    entry: saySnippet,\r\n\t    on: { ENDSPEECH: 'init' }\r\n\t}\r\n    }})\r\n\r\n\r\n// S: What are you looking for?\r\n// U: Gothenburg\r\n// S: <smth from wikipedia>\r\n","import { MachineConfig, send, Action, assign, } from \"xstate\";\r\nimport { actions } from 'xstate';\r\nconst { cancel } = actions;\r\nconst cancelTimeout = cancel('timeout');\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))  }\r\n\r\nfunction listen(): Action<SDSContext, SDSEvent> {\r\n    return send('LISTEN') }\r\n\r\n\r\nfunction sharedRecognitions() {\r\n    return [ \r\n        // {on:{TIMEOUT:'.promptAgain'}},\r\n        { target: '#help', cond: (context:SDSContext) =>  needHelp(context.recResult) },\r\n        { target: '#stop', cond: (context:SDSContext) =>  context.recResult==='stop' },\r\n        { target: \".nomatch\" }\r\n        ]\r\n}\r\nfunction promptAndAsk({ promptMsg, question, prompt2 }: { promptMsg: Action<SDSContext, SDSEvent>; question: string; prompt2:string }): \r\nMachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        //childs\r\n        states: {\r\n            //Get voice input; reset counter (ignore the counts from previous state)\r\n            prompt: { entry: promptMsg,  on: { ENDSPEECH: {cond: () => resetCounter()===true, target:\"question\" }}  },\r\n            question: {entry: say(question),  on: { ENDSPEECH: \"ask\" } },\r\n            ask: { entry:[listen(), send(\"TIMEOUT\", {delay:7500, id: 'timeout'})],  \r\n                },\r\n            //Fallback states\r\n            //*TECH ISSUE...? say() won't work unless mic is off (when not listening), which depends on a RECOGNISED event being sent first\r\n                // >>But upon RECOGNISED, it will say(reprompt) then go straight to .nomatch\r\n                // >>>Solution: additional onTIMEOUT under onRECOGNISED to prevent going to .nomatch\r\n                \r\n            promptAgain: {entry: [send(\"RECOGNISED\"), say(prompt2)], \r\n                    always: [\r\n                        //if counter<3: counter++ & go to prompt-again state\r\n                        {cond: () => counter() < 3, target:\"question\"},\r\n                        //elif counter>=3: go to init state\r\n                        {target:\"#goodbye\"}\r\n                         ] \r\n                              \r\n                },\r\n                \r\n            nomatch: { entry: [say(\"Sorry, I didnt get that\")],  \r\n                       on: { ENDSPEECH: \"question\" } \r\n                    },    \r\n        }\r\n    })\r\n}\r\n\r\n//Counter for timeout state\r\nlet count=0\r\nfunction counter(){\r\n    count+=1\r\n    return count\r\n}\r\nfunction resetCounter(){\r\n    count=0\r\n    return true\r\n}\r\n//test\r\n// console.log(counter()) //1\r\n// console.log(counter()) //2\r\n// console.log(counter()) //3\r\n// resetCounter()\r\n// console.log(counter()) //1\r\n\r\n\r\nlet needHelp = function(text:string):boolean{\r\n    let helpwords = ['help','I need help', 'help me']\r\n    return helpwords.includes(text) };\r\n\r\n\r\nconst grammar: { [index:string]: { person?:string, weekday?:string, time?:string, } } = \r\n{   \r\n    // 'input_phrase: {keytype: 'value'}\r\n    //People\r\n    \"John\": { person: \"John Appleseed\"}, \"Goofy\": { person: \"Goofy Dog\"},\r\n    \"Mickey\": { person: \"Mickey Mouse\"},\"Minnie\": { person: \"Minnie Mouse\"},\r\n    \"Donald\": { person: \"Donald Duck\"},\"Daisy\": { person: \"Daisy Duck\"},\r\n    \"Lisa\": { person: \"Lisa Simpson\"},\"Homer\": { person: \"Homer Simpson\"},\r\n    \"Monty\": { person: \"Montgomery Burns\"},\"Apu\": { person: \"Apu Nahasapeemapetilon\"},\r\n\r\n    //Days of week\r\n    \"on Monday\": { weekday: \"Monday\" }, \"on Tuesday\": { weekday: \"Tuesday\" }, \"on Wednesday\": { weekday: \"Wednesday\" },\r\n    \"on Thursday\": { weekday: \"Thursday\" }, \"on Friday\": { weekday: \"Friday\" }, \"on Saturday\": { weekday: \"Saturday\" },\r\n    \"on Sunday\": { weekday: \"Sunday\" }, \r\n    \"Monday\": { weekday: \"Monday\" }, \"Tuesday\": { weekday: \"Tuesday\" }, \"Wednesday\": { weekday: \"Wednesday\" },\r\n    \"Thursday\": { weekday: \"Thursday\" }, \"Friday\": { weekday: \"Friday\" }, \"Saturday\": { weekday: \"Saturday\" },\r\n    \"Sunday\": { weekday: \"Sunday\" }, \r\n\r\n    //Time of day\r\n    \"1\":{time:\"13:00\"}, \"2\":{time:\"14:00\"}, \"3\":{time:\"15:00\"}, \"4\":{time:\"16:00\" },\r\n    \"5\":{time:\"17:00\"}, \"6\":{time:\"18:00\"}, \"7\":{time:\"19:00\"}, \"8\":{time:\"20:00\" },\r\n    \"9\":{time:\"21:00\"}, \"10\":{time:\"22:00\"}, \"11\":{time:\"15:00\"}, \"12\":{time:\"00:00\" },\r\n    \"at 1\":{time:\"13:00\"}, \"at 2\":{time:\"14:00\"}, \"at 3\":{time:\"15:00\"}, \"at 4\":{time:\"16:00\" },\r\n    \"at 5\":{time:\"17:00\"}, \"at 6\":{time:\"18:00\"}, \"at 7\":{time:\"19:00\"}, \"at 8\":{time:\"20:00\" },\r\n    \"at 9\":{time:\"21:00\"}, \"at 10\":{time:\"22:00\"}, \"at 11\":{time:\"23:00\"}, \"at 12\":{time:\"00:00\" },\r\n}\r\n\r\nconst yes_or_no: { [index:string]:{yes_no?:boolean} } = \r\n{\r\n    \"yes\": {yes_no: true}, \"of course\": {yes_no: true}, \"sure\": {yes_no: true}, \"absolutely\": {yes_no: true},\r\n    \"yeah\": {yes_no: true}, \"yep\": {yes_no: true}, \"okay\": {yes_no: true},\r\n    \"no\": {yes_no: false}, \"nope\": {yes_no: false}, \"no thanks\": {yes_no: false}, \"nah\": {yes_no: false},\r\n\r\n}\r\n\r\n\r\n//STATE MACHINE\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    id: 'Plus',\r\n    initial: 'welcome',\r\n    states: {\r\n\r\n        //Come here on recognising 'help'; \r\n        //then go back to last appointment.mainstate (stored in appointment.history)\r\n        help: {\r\n            id:'help',\r\n            entry: say(\"I am here if you need help.\"),\r\n            on: { ENDSPEECH: '#appointment.history' }\r\n            },\r\n        stop: {\r\n            id:'stop',\r\n            entry: say(\"Ok, stopped.\"),\r\n            on: { ENDSPEECH: '#root.dm.init' }\r\n            },\r\n        goodbye: {id:'goodbye',\r\n            entry: say(\"You were silent for too many times. Bye for now.\"), \r\n                          \r\n                    //Reset counter and go to init\r\n                     always: {cond: () => resetCounter()===true, target:\"#root.dm.init\"} //init of dmMenu if imported; else init hereafter\r\n            },\r\n        \r\n        \r\n        //State Idle\r\n        init: { id:'PlusInit',\r\n            on: {CLICK: 'welcome'} \r\n            },\r\n\r\n        //state 0; greeting message\r\n        welcome: {\r\n            entry: say(\"Hello, lets create a meeting.\"),\r\n            on: { ENDSPEECH: 'appointment' }\r\n            },\r\n\r\n        appointment :{\r\n            id:'appointment',\r\n            initial: \"who\",\r\n            states: {\r\n        \r\n        //History of appointment making      \r\n        history: {type:'history', history:'shallow'},\r\n\r\n        //State Q1\r\n        who: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"person\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { person: grammar[context.recResult].person } }),\r\n                    target: \"day\"\r\n                    },\r\n                    ...sharedRecognitions(),\r\n                    ], \r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: \"\"\r\n                        })), question: 'Who are you meeting with?', prompt2: 'You can say Mickey or Minnie for example'\r\n                    })  \r\n            },\r\n\r\n        //State Q2\r\n        day: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"weekday\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { weekday: grammar[context.recResult].weekday } }),\r\n                    target: \"how_long\"\r\n                    },...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. ${context.person}.`\r\n                        })), question: 'On which day is your meeting?', prompt2: 'Say a day of the week'\r\n                    })\r\n\r\n            },\r\n\r\n        //State Q3\r\n        how_long: {\r\n            on: { \r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'confirm_whole_day' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'what_time'},\r\n                    ...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `OK. on ${context.weekday}.`\r\n                        })), question: 'Will it take the whole day?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n        \r\n        //State Q4: one-step confirmation\r\n        confirm_whole_day: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},\r\n                    ...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `Alright. Meeting ${context.person} on ${context.weekday} for the whole day.`\r\n                        })), question: 'Shall I create a whole-day appointment?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n\r\n        //Two-steps confirmation\r\n        //State Q4a\r\n        what_time: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    {\r\n                    cond: (context) => \"time\" in (grammar[context.recResult] || {}),\r\n                    actions: assign((context) => { return { time: grammar[context.recResult].time } }),\r\n                    target: \"confirm_with_time\"\r\n                    },...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `At what time is your meeting?`\r\n                        })), question: 'Say an hour of the day.', prompt2:'You may say at 1, at 2, and so on'\r\n                    })\r\n                \r\n            },\r\n\r\n        //State Q4b\r\n        confirm_with_time: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    // Yes\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === true,\r\n                    target: 'done' },\r\n                    // No\r\n                    {cond: (context) => \"yes_no\" in (yes_or_no[context.recResult] || {}) \r\n                                        && yes_or_no[context.recResult].yes_no === false,\r\n                    target: 'who'},...sharedRecognitions(),\r\n                    ],\r\n                TIMEOUT:\".promptAgain\",\r\n                },\r\n                ...promptAndAsk({\r\n                        promptMsg: send((context) => ({\r\n                            type: \"SPEAK\",\r\n                            value: `Alright. Meeting ${context.person} on ${context.weekday} at ${context.time}.`\r\n                        })), question: 'Shall I create the appointment?', prompt2:'Say yes or no'\r\n                    })\r\n            },\r\n        //State 5\r\n        done: {\r\n             entry: say(\"Great, your appointment has been made.\"), \r\n             on: { ENDSPEECH: \"#root.dm.init\" } //init of dmMenu\r\n            },\r\n        }\r\n\r\n    }//End of Appointment State\r\n    }\r\n}\r\n)\r\n","import { MachineConfig, actions, Action, assign, send } from \"xstate\";\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/meetingGrammar'\r\n\r\nconst gram = loadGrammar(grammar)\r\n\r\n// Parse recognised speech to an object with 3 properties\r\nfunction parseMeeting(input:string) {\r\n\r\n    let prs = parse(input.toLowerCase().split(/\\s+/), gram)\r\n    let result = prs.resultsForRule(gram.$root)[0]\r\n\r\n    let meeting ; //undefined if input cannot be parsed\r\n    if (result!=undefined) {\r\n        meeting = result.meeting;\r\n        // remove the prepositions 'at','on' \r\n        if(!!meeting.time && meeting.time.slice(0,3)==='at '){\r\n            meeting.time=meeting.time.slice(3) };\r\n        if(!!meeting.day && meeting.day.slice(0,3)==='on '){\r\n            meeting.day=meeting.day.slice(3) };\r\n        }\r\n    return meeting \r\n    }\r\n\r\n\r\nfunction whatsMissing(context:SDSContext){\r\n    let missing=[]\r\n    if(!context.person){missing.push(\"with whom\")}\r\n    if(!context.weekday){missing.push(\"on which day\")}\r\n    if(!context.time){missing.push(\"at what time\")}\r\n    \r\n    let prompt;\r\n    if (missing.length===0) {prompt=`I have all the details of your meeting!`};\r\n    if (missing.length===1) {prompt=`Tell me ${missing[0]} you are meeting`};\r\n    if (missing.length===2) {prompt=`Tell me ${missing[0]}, and ${missing[1]} is your meeting`};\r\n    if (missing.length===3) {prompt=`Tell me ${missing[0]}, ${missing[1]}, and ${missing[2]} is the meeting`};\r\n    return prompt\r\n}\r\n\r\n\r\n// const sayWhatsMissing: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n//     type: \"SPEAK\", value: whatsMissing(context)\r\n// }))\r\n\r\n\r\nfunction knownSoFar(context:SDSContext){\r\n    let withPerson=(!!context.person)? 'with '+context.person : ''\r\n    let onDay=(!!context.weekday)? 'on '+context.weekday : ''\r\n    let atTime;\r\n    if(!!context.time){\r\n        atTime=(context.time === 'whole day')? 'for the whole day' : 'at '+context.time \r\n        }\r\n    else{atTime=''}\r\n\r\n    return `${withPerson} ${onDay} ${atTime}`\r\n}\r\n\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction sharedRecognitions() {\r\n    return [\r\n        { target: 'stop', cond: (context:SDSContext) => context.recResult === 'stop' },\r\n        { target: 'restart', cond: (context:SDSContext) => context.recResult === 'restart' },\r\n        { target: \".nomatch\" }\r\n        ]\r\n}\r\n\r\nfunction promptAndAsk(promptEvent: Action<SDSContext, SDSEvent>): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: promptEvent,\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n            nomatch: { entry: [say(\"Sorry, I didnt get that\")],  \r\n                       on: { ENDSPEECH: \"prompt\" } \r\n            },\r\n        }\r\n    })\r\n}\r\n\r\nfunction sayYes(answer: string){\r\n    let yes=[\"yes\", \"of course\", \"sure\", \"absolutely\", \"yeah\", \"yep\", \"okay\",]\r\n    if(yes.includes(answer)){ return true }\r\n}\r\n\r\nfunction sayNo(answer: string){\r\n    let yes=[\"no\", \"nope\", \"no thanks\", \"nah\",]\r\n    if(yes.includes(answer)){ return true }\r\n}\r\n\r\n/*\r\nISSUES AND DESIGN CHOICES\r\n\r\nI did not use orthogonal states, instead each property is treated as a slot to be filled (to context.slot_name).\r\nAs long as a slot is unfilled (===undefined), the system will keep prompting for more information and update \r\nthe context slots accordingly (but only with new information, ie, the already-filled slots won't be overwritten).\r\n\r\nAn issue I encountered was that the ASR automatically capitalises the first letter of a sentence and adding full stop at the end,\r\nwhich will cause the grammar parser to fail to recognise it. So I lowercase the input string, but that means that the <item> person_name </item>\r\nand words like 'I' in the SRXML must be written in lowercase too.\r\n\r\n\r\n*/\r\n\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    id: 'Pro',\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'start'\r\n            }\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok, stopped\"),\r\n            always: 'init'\r\n        },\r\n        start: {\r\n            entry: say(\"Lets make an appointment. \"),\r\n            // always: 'welcome'\r\n            on: { ENDSPEECH: \"welcome\" }\r\n        },\r\n        restart: {\r\n            entry: say(\"Ok, starting over\"),\r\n            // always: 'welcome'\r\n            on: { ENDSPEECH: \"welcome\" } \r\n        },\r\n\r\n        //01\r\n        welcome: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    \r\n                    //Update context as long as parsed grammar object is not undefined\r\n                    {\r\n                    cond: (context) => !!parseMeeting(context.recResult),\r\n                    actions: assign((context) => { return { person: parseMeeting(context.recResult).person,\r\n                                                            weekday:parseMeeting(context.recResult).day,\r\n                                                            time: parseMeeting(context.recResult).time,\r\n                         } }),\r\n                    target: \"transit\"\r\n                    },\r\n                    ...sharedRecognitions(),\r\n\r\n                ]},\r\n                ...promptAndAsk( say(\"Tell me the meeting details.\") )\r\n        },\r\n        \r\n        //02\r\n        transit:{\r\n            always: [\r\n                //All slots filled\r\n                { target: 'final', cond: (context) => !!context.person && !!context.weekday && !!context.time },\r\n\r\n                //At least one slot unfilled\r\n                { target: 'askMore', cond: (context) => !context.person || !context.weekday || !context.time },\r\n\r\n            ]\r\n        },\r\n\r\n        //03 \r\n        askMore: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    \r\n                    //Update context as long as parsed grammar object is not undefined\r\n                    // ONLY update unfilled slots (ie, undefined properties)\r\n\r\n                    //Missing 1 slot >> update 1 slot:\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !!context.weekday && !!context.time,\r\n                      actions: assign((context) => { return { person: parseMeeting(context.recResult).person}  } ),\r\n                      target: \"transit\"   },\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !!context.person  && !!context.time,\r\n                      actions: assign((context) => { return { weekday: parseMeeting(context.recResult).day}  } ),\r\n                      target: \"transit\"   },\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !!context.person && !!context.weekday,\r\n                      actions: assign((context) => { return { time: parseMeeting(context.recResult).time}  } ),\r\n                      target: \"transit\"   },\r\n\r\n                    //Missing 2 slots >> update 2 slots:\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !context.person && !context.weekday,\r\n                        actions: assign((context) => { return { person: parseMeeting(context.recResult).person, weekday: parseMeeting(context.recResult).day}  } ),\r\n                        target: \"transit\"   },\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !context.person && !context.time,\r\n                        actions: assign((context) => { return { person: parseMeeting(context.recResult).person, time: parseMeeting(context.recResult).time}  } ),\r\n                        target: \"transit\"   },\r\n                    { cond: (context) => !!parseMeeting(context.recResult) && !context.weekday && !context.time,\r\n                        actions: assign((context) => { return { weekday: parseMeeting(context.recResult).day, time: parseMeeting(context.recResult).time}  } ),\r\n                        target: \"transit\"   },\r\n                    \r\n                    //Missing 3 slots: \r\n                    ...sharedRecognitions(),\r\n\r\n                ]},\r\n            ...promptAndAsk( send((context) => ({ type: \"SPEAK\", value: whatsMissing(context)+knownSoFar(context)+'?' })) )\r\n\r\n        },\r\n\r\n        //04\r\n        final:{\r\n            on: {\r\n                RECOGNISED: [\r\n                    { cond: (context) => sayYes(context.recResult)===true, target: \"done\"   },\r\n                    { cond: (context) => sayNo(context.recResult)===true, target: \"restart\"   }, \r\n                    ...sharedRecognitions(),\r\n\r\n                ]},\r\n            ...promptAndAsk( send((context) => ({ \r\n                type: \"SPEAK\", \r\n                value: `Meeting ${knownSoFar(context)}. Was that correct?` \r\n                })) )\r\n        },\r\n\r\n        //05\r\n        done: {\r\n            entry: say(\"Great, your appointment has been made.\"), \r\n            on: { ENDSPEECH: \"#root.dm.init\" } \r\n           },\r\n        \r\n    },\r\n\r\n})","/*\r\n\r\n$root mymeeting\r\n\r\n$mymeeting [$Please] [$Meet] [$Person] [$Day] [$Time] [$Please] [punctuation];\r\n\r\n$Please please|thanks|thank you ...\r\n$Meet meet|create a meeting with| I'm meeting ...\r\n$Person [with] Donald|Mickey|... \r\n$Day [on] Monday|Tuesday|Wednesday...\r\n$Time [at] noon|1|2|... [a.m.|p.m.] | [for][the] all day|whole day|entire day\r\n\r\n>>Returns Object.meeting.person/day/time;  a property=undefined if an item is not mentioned\r\n>>When saying 2 or more items, person-day-time may be in any order (eg, 'at 10 with Mickey' also works)\r\n**Names of people are lowercase as ASR applies sentence capitalisation, which causes SRGS to fail to recognise 'Meet...',\r\n  so I lowercase all the recognised strings in dmAppointmentPro\r\n\r\n*/\r\n\r\nexport const grammar = `\r\n<grammar root=\"mymeeting\">\r\n  <rule id=\"mymeeting\">\r\n    \r\n    <item repeat=\"0-\"><ruleref uri=\"#Politeness\"/></item>\r\n\t\r\n    <item repeat=\"0-1\"><ruleref uri=\"#MakeMeeting\"/></item>\r\n\r\n    <!--Six different orders-->\r\n    <one-of>  \r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#person\"/></item><item repeat=\"0-1\"><ruleref uri=\"#day\"/></item><item repeat=\"0-1\"><ruleref uri=\"#time\"/></item> </item>\r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#person\"/></item><item repeat=\"0-1\"><ruleref uri=\"#time\"/></item><item repeat=\"0-1\"><ruleref uri=\"#day\"/></item> </item> \r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#day\"/></item><item repeat=\"0-1\"><ruleref uri=\"#person\"/></item><item repeat=\"0-1\"><ruleref uri=\"#time\"/></item> </item>\r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#day\"/></item><item repeat=\"0-1\"><ruleref uri=\"#time\"/></item><item repeat=\"0-1\"><ruleref uri=\"#person\"/></item> </item>\r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#time\"/></item><item repeat=\"0-1\"><ruleref uri=\"#day\"/></item><item repeat=\"0-1\"><ruleref uri=\"#person\"/></item> </item>\r\n        <item> <item repeat=\"0-1\"><ruleref uri=\"#time\"/></item><item repeat=\"0-1\"><ruleref uri=\"#person\"/></item><item repeat=\"0-1\"><ruleref uri=\"#day\"/></item> </item>   \r\n    </one-of>\r\n    \r\n    <item repeat=\"0-\"><ruleref uri=\"#Politeness\"/></item>\r\n    <item repeat=\"0-\">.</item><item repeat=\"0-\">!</item><item repeat=\"0-\">?</item>\r\n    \r\n    <tag>\r\n     out.meeting=new Object();\r\n     out.meeting.person= rules.person; \r\n     out.meeting.day= rules.day; \r\n     out.meeting.time= rules.time; \r\n    </tag>\r\n    \r\n  </rule> \r\n\r\n   //Polite Expressions//\r\n   <rule id=\"Politeness\">\r\n        <one-of>  \r\n            <item> please </item> <item> thanks </item> <item> thank you </item> \r\n\t\t\t<item> could you </item> <item> would you </item> <item> can you </item> \r\n\t\t\t<item> will you </item> <item> i would like to </item>  <item> i want to </item> \r\n        </one-of>\r\n   </rule>\r\n\r\n  \r\n   //Make Meeting Command//\r\n   <rule id=\"MakeMeeting\">\r\n        <one-of>  \r\n            <item> create a meeting </item> <item> create an appointment </item> \r\n\t\t\t<item> make a meeting </item> <item> make an appointment </item>\r\n            <item> we have a meeting </item> <item> have a meeting </item>\r\n            <item> i am meeting </item> <item> i'm meeting </item> <item> meet </item> <item> i have a meeting </item>\r\n            <item> meeting </item> \r\n        </one-of>\r\n   </rule>\r\n\r\n   //People//\r\n   <rule id=\"person\"> <item repeat=\"0-1\">with</item>\r\n        <one-of>  \r\n            \r\n            <item> john <tag> out=\"John Appleseed\" </tag></item>  \r\n            <item> goofy <tag> out=\"Goofy Dog\" </tag></item> \r\n            <item> mickey <tag> out=\"Mickey Mouse\" </tag></item> \r\n            <item> minnie <tag> out=\"Minnie Mouse\" </tag></item> \r\n            <item> donald <tag> out=\"Donald Duck\" </tag></item> \r\n            <item> daisy <tag> out=\"Daisy Duck\" </tag></item> \r\n            <item> lisa <tag> out=\"Lisa Simpson\" </tag></item> \r\n            <item> homer <tag> out=\"Homer Simpson\" </tag></item> \r\n            <item> monty <tag> out=\"Montgomery Burns\" </tag></item> \r\n            <item> apu <tag> out=\"Apu Nahasapeemapetilon\" </tag></item> \r\n\r\n        </one-of>\r\n   </rule>\r\n   \r\n   //Days//\r\n    <rule id=\"day\"> <item repeat=\"0-1\">on</item>\r\n        <one-of> \r\n            <item> monday </item> <item> tuesday </item> <item> wednesday </item>\r\n            <item> thursday </item> <item> friday </item> <item> saturday </item>\r\n            <item> sunday </item>\r\n        </one-of> \r\n    </rule>\r\n\r\n   //Times//\r\n    <rule id=\"time\"> \r\n        <one-of> \r\n            <item>\r\n                <item repeat=\"0-1\">at</item>\r\n                <one-of> \r\n                    <item> noon <tag>out=\"12 p.m.\";</tag></item> \r\n                    <item> midnight <tag>out=\"12 a.m.\";</tag></item> \r\n                    <item>1</item> <item>2</item> <item>3</item> <item>4</item> <item>5</item>\r\n                    <item>6</item> <item>7</item> <item>8</item> <item>9</item> <item>10</item>\r\n                    <item>11</item> <item>12</item>\r\n                </one-of>\r\n\r\n                <item repeat=\"0-1\">\r\n                  <one-of> \r\n                    <item> a.m. </item> <item> p.m. </item>\r\n                  </one-of>\r\n                </item>\r\n            </item>\r\n\r\n            <item> <tag> out='whole day'; </tag>\r\n                <item repeat=\"0-1\">for</item>\r\n                <item repeat=\"0-1\">the</item>\r\n                <one-of>\r\n                <item> whole day </item> <item> all day </item> <item> entire day </item>\r\n                </one-of>\r\n            </item>\r\n\r\n        </one-of>\r\n\r\n    </rule>\r\n   \r\n</grammar>\r\n`\r\n","\r\nimport { MachineConfig, send, Action } from \"xstate\";\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/pizzaGrammar'\r\n\r\nconst gram = loadGrammar(grammar)\r\nconst input = \"I would like a coca cola and three large pizzas with pepperoni and mushrooms\"\r\nconst prs = parse(input.split(/\\s+/), gram)\r\nconst result = prs.resultsForRule(gram.$root)[0]\r\n\r\nconsole.log(result)\r\n\r\nconst sayColour: Action<SDSContext, SDSEvent> = send((context: SDSContext) => ({\r\n    type: \"SPEAK\", value: `Repainting to ${context.recResult}`\r\n}))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'welcome',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcome'\r\n            }\r\n        },\r\n        welcome: {id:'ColourWelcome',\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\r\n                    { target: 'repaint' }]\r\n            },\r\n            ...promptAndAsk(\"Tell me the colour\")\r\n        },\r\n        stop: {\r\n            entry: say(\"Ok\"),\r\n            always: '#root.dm.init' //init of dmMenu\r\n        },\r\n        repaint: {\r\n            initial: 'prompt',\r\n            states: {\r\n                prompt: {\r\n                    entry: sayColour,\r\n                    on: { ENDSPEECH: 'repaint' }\r\n                },\r\n                repaint: {\r\n                    entry: 'changeColour',\r\n                    always: '#ColourWelcome'\r\n                }\r\n            }\r\n        }\r\n    }\r\n})","export const grammar = `\r\n<grammar root=\"order\">\r\n   <rule id=\"order\">\r\n      I would like a\r\n      <ruleref uri=\"#drink\"/>\r\n      <tag>out.drink = new Object(); out.drink.liquid=rules.drink.type;\r\n           out.drink.drinksize=rules.drink.drinksize;</tag>\r\n      and\r\n      <ruleref uri=\"#pizza\"/>\r\n      <tag>out.pizza=rules.pizza;</tag>\r\n   </rule>\r\n   <rule id=\"kindofdrink\">\r\n      <one-of>\r\n         <item>coke</item>\r\n         <item>pepsi</item>\r\n         <item>coca cola<tag>out=\"coke\";</tag></item>\r\n      </one-of>\r\n   </rule>\r\n   <rule id=\"foodsize\">\r\n      <tag>out=\"medium\";</tag> <!-- \"medium\" is default if nothing said -->\r\n      <item repeat=\"0-1\">\r\n         <one-of>\r\n            <item>small<tag>out=\"small\";</tag></item>\r\n            <item>medium</item>\r\n            <item>large<tag>out=\"large\";</tag></item>\r\n            <item>regular<tag>out=\"medium\";</tag></item>\r\n         </one-of>\r\n      </item>\r\n   </rule>\r\n   <!-- Construct Array of toppings, return Array -->\r\n   <rule id=\"tops\">\r\n      <tag>out=new Array;</tag>\r\n      <ruleref uri=\"#top\"/>\r\n      <tag>out.push(rules.top);</tag>\r\n      <item repeat=\"1-\">\r\n         and\r\n         <ruleref uri=\"#top\"/>\r\n         <tag>out.push(rules.top);</tag>\r\n      </item>\r\n   </rule>\r\n   <rule id=\"top\">\r\n      <one-of>\r\n         <item>anchovies</item>\r\n         <item>pepperoni</item>\r\n         <item>mushroom<tag>out=\"mushrooms\";</tag></item>\r\n         <item>mushrooms</item>\r\n      </one-of>\r\n   </rule>\r\n   <!-- Two properties (drinksize, type) on left hand side Rule Variable -->\r\n   <rule id=\"drink\">\r\n      <ruleref uri=\"#foodsize\"/>\r\n      <ruleref uri=\"#kindofdrink\"/>\r\n      <tag>out.drinksize=rules.foodsize; out.type=rules.kindofdrink;</tag>\r\n   </rule>\r\n   <!-- Three properties on rules.pizza -->\r\n   <rule id=\"pizza\">\r\n      <ruleref uri=\"#number\"/>\r\n      <ruleref uri=\"#foodsize\"/>\r\n      <tag>out.pizzasize=rules.foodsize; out.number=rules.number;</tag>\r\n      pizzas with\r\n      <ruleref uri=\"#tops\"/>\r\n      <tag>out.topping=rules.tops;</tag>\r\n   </rule>\r\n   <rule id=\"number\">\r\n      <one-of>\r\n         <item>\r\n            <tag>out=1;</tag>\r\n            <one-of>\r\n               <item>a</item>\r\n               <item>one</item>\r\n            </one-of>\r\n         </item>\r\n         <item>two<tag>out=2;</tag></item>\r\n         <item>three<tag>out=3;</tag></item>\r\n      </one-of>\r\n   </rule>\r\n</grammar>\r\n`\r\n","import { MachineConfig, send, Action } from \"xstate\";\r\n\r\n//Other dmMachines\r\nimport { dmMachine as dmSmartHome } from \"./dmSmartHome\";\r\nimport { dmMachine as dmSearch } from \"./dmSearch\";\r\nimport { dmMachine as dmAppointmentPlus } from \"./dmAppointmentPlus\";\r\nimport { dmMachine as dmAppointmentPro } from \"./dmAppointmentPro\";\r\nimport { dmMachine as dmColourChanger } from \"./dmColourChanger\";\r\n\r\n// SRGS parser and example (logs the results to console on page load)\r\nimport { loadGrammar } from './runparser'\r\nimport { parse } from './chartparser'\r\nimport { grammar } from './grammars/menuGrammar'\r\n\r\nconst gram = loadGrammar(grammar)\r\n\r\n// function paeseCmd() returns formatted str containing .action & .object values\r\nlet parseCmd: (text:string) => string = function (\r\n    text: string,\r\n  ): string {\r\n    let prs = parse(text.toLowerCase().split(/\\s+/), gram)\r\n    let result = prs.resultsForRule(gram.$root)[0]\r\n    let out= (!!result)? result.intent : result // .intent or undefined\r\n    return out ;\r\n  };\r\n\r\nlet input1 = \"smart home\"\r\nlet input2 = \"lalalala\"\r\nconsole.log(parseCmd(input1)) // .intent==='smarthome'\r\nconsole.log(parseCmd(input2)) // undefined\r\n\r\n\r\nconst sayResponse: Action<SDSContext, SDSEvent> = send((context: SDSContext) => (\r\n    {type: \"SPEAK\", value: parseCmd(context.recResult)}\r\n))\r\n\r\nfunction say(text: string): Action<SDSContext, SDSEvent> {\r\n    console.log(`>>Saying: ${text}`)\r\n    return send((_context: SDSContext) => ({ type: \"SPEAK\", value: text }))\r\n}\r\n\r\n\r\n\r\nfunction promptAndAsk(prompt: string): MachineConfig<SDSContext, any, SDSEvent> {\r\n    return ({\r\n        initial: 'prompt',\r\n        states: {\r\n            prompt: {\r\n                entry: say(prompt),\r\n                on: { ENDSPEECH: 'ask' }\r\n            },\r\n            ask: {\r\n                entry: send('LISTEN'),\r\n            },\r\n        }\r\n    })\r\n}\r\n\r\n\r\nexport const dmMachine: MachineConfig<SDSContext, any, SDSEvent> = ({\r\n    initial: 'init',\r\n    states: {\r\n        init: {\r\n            on: {\r\n                CLICK: 'welcomePrompt'\r\n            }\r\n        },\r\n        \r\n\r\n        welcomePrompt: {\r\n            on: {\r\n                RECOGNISED: [\r\n                    { target: 'stop', cond: (context) => context.recResult === 'stop' },\r\n                    { target: 'NotACommand', cond: (context) => !parseCmd(context.recResult)},\r\n                    { target: 'smarthome', cond: (context) => parseCmd(context.recResult) === 'smarthome'},\r\n                    { target: 'search', cond: (context) => parseCmd(context.recResult) === 'search'},\r\n                    { target: 'appointmentPlus', cond: (context) => parseCmd(context.recResult) === 'appointmentPlus'},\r\n                    { target: 'appointmentPro', cond: (context) => parseCmd(context.recResult) === 'appointmentPro'},\r\n                    { target: 'changecolour', cond: (context) => parseCmd(context.recResult) === 'changecolour'},\r\n                    ],\r\n                CLICK: 'stop'\r\n                },\r\n            ...promptAndAsk(\"Hi, what can I do for you?\")\r\n            },\r\n        stop: {\r\n            entry: say(\"Ok, stopped\"),\r\n            always: 'init'\r\n            },\r\n        NotACommand: {\r\n            entry: say(\"Sorry, I dont know how to do that. I can control smart home, search, make an appointment, or change the colour.\"),\r\n            on: { ENDSPEECH: \"welcomePrompt\" }\r\n            },\r\n        \r\n            \r\n        smarthome: { ...dmSmartHome, onDone:\"init\"},\r\n\r\n        search: { ...dmSearch, onDone:\"init\"},\r\n\r\n        appointmentPlus: { ...dmAppointmentPlus, onDone:\"init\"},\r\n\r\n        appointmentPro: { ...dmAppointmentPro, onDone:\"init\"},\r\n\r\n        changecolour: { ...dmColourChanger, onDone: 'init' },\r\n    }\r\n})\r\n","/*\r\n  root $mycommand;\r\n  $mycommand = [$please] $smarthome | $search | $appointmentPlus |$appontmentPro |$changecolour [$please];\r\n  \r\n  $smarthome \r\n  $search\r\n  $appointmentPlus\r\n  $appontmentPro\r\n\r\n\r\n*/\r\n\r\nexport const grammar = `\r\n<grammar root=\"mycommand\">\r\n  <rule id=\"mycommand\">\r\n\r\n    <!--Polite expressions before-->\r\n    <item repeat=\"0-\"><ruleref uri=\"#Politeness\"/></item> \r\n    \r\n    <one-of> \r\n        <!--Make object with .intent property -->\r\n\r\n        <item>   \r\n          <ruleref uri=\"#smarthome\"/>\r\n          <tag> out= new Object();out.intent= rules.smarthome; </tag>  \r\n        </item> \r\n\r\n        <item>   \r\n          <ruleref uri=\"#search\"/>\r\n          <tag> out= new Object();out.intent= rules.search; </tag>       \r\n        </item>\r\n\r\n        <item>   \r\n          <ruleref uri=\"#appointmentPlus\"/>\r\n          <tag> out= new Object();out.intent= rules.appointmentPlus; </tag>  \r\n        </item>\r\n\r\n        <item>   \r\n          <ruleref uri=\"#appointmentPro\"/>\r\n          <tag> out= new Object();out.intent= rules.appointmentPro; </tag>     \r\n        </item>\r\n\r\n        <item>\r\n            <ruleref uri=\"#changecolour\"/>\r\n            <tag> out= new Object();out.intent= rules.changecolour; </tag>      \r\n        </item>\r\n    </one-of>\r\n\r\n    <!--Polite expressions after-->\r\n    <item repeat=\"0-\"><ruleref uri=\"#Politeness\"/></item>\r\n\r\n\r\n\r\n  </rule> \r\n\r\n\r\n  //Polite Expressions//\r\n  <rule id=\"Politeness\">\r\n       <one-of>  \r\n           <item> please </item> <item> thanks </item> <item> thank you </item> \r\n           <item> could you </item> <item> would you </item> <item> can you </item> \r\n           <item> will you </item> <item> i would like to </item>  <item> i want to </item> \r\n       </one-of>\r\n  </rule>\r\n\r\n\r\n  //01 Smart Home//\r\n  <rule id=\"smarthome\">\r\n       <one-of>  \r\n           <item> smart home </item> <item> control my home </item> <item> control my stuff </item> \r\n           <item> control my house </item> <item> use smart home </item> \r\n       </one-of>\r\n   <tag> out=\"smarthome\" </tag>\r\n  </rule>\r\n\r\n  //02 Search on DuckDuckGo//\r\n  <rule id=\"search\">\r\n       <one-of>  \r\n           <item> search </item> <item> do a search </item> <item> search for something </item> \r\n           <item> search on the web </item> <item> search on the internet </item> \r\n       </one-of>\r\n    <tag> out=\"search\" </tag>\r\n  </rule>\r\n\r\n  //03 Appointment Plus//\r\n  <rule id=\"appointmentPlus\">\r\n       <one-of>  \r\n           <item> appointment plus </item> <item> make an appointment step by step </item> \r\n           <item> appointments plus </item> <item> appointment-plus </item>\r\n       </one-of>\r\n   <tag> out=\"appointmentPlus\" </tag>\r\n  </rule>\r\n\r\n  //04 Appointment Pro//\r\n  <rule id=\"appointmentPro\">\r\n       <one-of>  \r\n           <item> make an appointment </item> <item> meet someone </item> <item> appointment pro </item> \r\n           <item> appointment in one go </item> <item> appointment in one step </item> \r\n           <item> appointments pro </item> <item> appointment-pro </item>\r\n       </one-of>\r\n     <tag> out=\"appointmentPro\" </tag>\r\n  </rule>\r\n\r\n  //05 Colour Changer//\r\n  <rule id=\"changecolour\">\r\n       <one-of>  \r\n           <item> color changer </item> <item> change the color </item> <item> change color </item> \r\n           <item> colour changer </item> <item> change the colour </item> <item> change colour </item> \r\n       </one-of>\r\n     <tag> out=\"changecolour\" </tag>\r\n\r\n  </rule>\r\n\r\n\r\n\r\n   \r\n</grammar>\r\n`\r\n","import \"./styles.scss\";\r\nimport * as React from \"react\";\r\nimport * as ReactDOM from \"react-dom\";\r\nimport { Machine, assign, send, State } from \"xstate\";\r\nimport { useMachine, asEffect } from \"@xstate/react\";\r\nimport { inspect } from \"@xstate/inspect\";\r\nimport { dmMachine } from './dmMenu';\r\n\r\n\r\ninspect({\r\n    url: \"https://statecharts.io/inspect\",\r\n    iframe: false\r\n});\r\n\r\nimport { useSpeechSynthesis, useSpeechRecognition } from 'react-speech-kit';\r\n\r\n\r\nconst machine = Machine<SDSContext, any, SDSEvent>({\r\n    id: 'root',\r\n    type: 'parallel',\r\n    states: {\r\n        dm: {\r\n            ...dmMachine\r\n        },\r\n        asrtts: {\r\n            initial: 'idle',\r\n            states: {\r\n                idle: {\r\n                    on: {\r\n                        LISTEN: 'recognising',\r\n                        SPEAK: {\r\n                            target: 'speaking',\r\n                            actions: assign((_context, event) => { return { ttsAgenda: event.value } })\r\n                        }\r\n                    }\r\n                },\r\n                recognising: {\r\n                    initial: 'progress',\r\n                    entry: 'recStart',\r\n                    exit: 'recStop',\r\n                    on: {\r\n                        ASRRESULT: {\r\n                            actions: ['recLogResult',\r\n                                assign((_context, event) => { return { recResult: event.value } })],\r\n                            target: '.match'\r\n                        },\r\n                        // TIMEOUT:\"..recStop\", //mic off so that say() can work\r\n                        RECOGNISED: 'idle'\r\n                    },\r\n                    states: {\r\n                        progress: {\r\n                        },\r\n                        match: {\r\n                            entry: send('RECOGNISED'),\r\n                        },\r\n                    }\r\n                },\r\n                speaking: {\r\n                    entry: 'ttsStart',\r\n                    on: {\r\n                        ENDSPEECH: 'idle',\r\n                    }\r\n                }\r\n            }\r\n        }\r\n    },\r\n},\r\n    {\r\n        actions: {\r\n            recLogResult: (context: SDSContext) => {\r\n                /* context.recResult = event.recResult; */\r\n                console.log('<< ASR: ' + context.recResult);\r\n\r\n            },\r\n            test: () => {\r\n                console.log('test')\r\n            },\r\n            logIntent: (context: SDSContext) => {\r\n                /* context.nluData = event.data */\r\n                console.log('<< NLU intent: ' + context.nluData.intent.name)\r\n            }\r\n        },\r\n    });\r\n\r\n\r\n\r\ninterface Props extends React.HTMLAttributes<HTMLElement> {\r\n    state: State<SDSContext, any, any, any>;\r\n}\r\nconst ReactiveButton = (props: Props): JSX.Element => {\r\n    switch (true) {\r\n        case props.state.matches({ asrtts: 'recognising' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"glowing 20s linear\" }} {...props}>\r\n                    Listening...\r\n                </button>\r\n            );\r\n        case props.state.matches({ asrtts: 'speaking' }):\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\"\r\n                    style={{ animation: \"bordering 1s infinite\" }} {...props}>\r\n                    Speaking...\r\n                </button>\r\n            );\r\n        default:\r\n            return (\r\n                <button type=\"button\" className=\"glow-on-hover\" {...props}>\r\n                    Click to start\r\n                </button >\r\n            );\r\n    }\r\n}\r\n\r\nfunction App() {\r\n    const { speak, cancel, speaking } = useSpeechSynthesis({\r\n        onEnd: () => {\r\n            send('ENDSPEECH');\r\n        },\r\n    });\r\n    const { listen, listening, stop } = useSpeechRecognition({\r\n        onResult: (result: any) => {\r\n            send({ type: \"ASRRESULT\", value: result });\r\n        },\r\n    });\r\n    const [current, send, service] = useMachine(machine, {\r\n        devTools: true,\r\n        actions: {\r\n            recStart: asEffect(() => {\r\n                console.log('Ready to receive a voice input.');\r\n                listen({\r\n                    interimResults: false,\r\n                    continuous: true\r\n                });\r\n            }),\r\n            recStop: asEffect(() => {\r\n                console.log('Recognition stopped.');\r\n                stop()\r\n            }),\r\n            ttsStart: asEffect((context, effect) => {\r\n                console.log('Speaking...');\r\n                speak({ text: context.ttsAgenda })\r\n            }),\r\n            ttsCancel: asEffect((context, effect) => {\r\n                console.log('TTS STOP...');\r\n                cancel()\r\n            }),\r\n            speak: asEffect((context) => {\r\n\t            console.log('Speaking...');\r\n                speak({text: context.ttsAgenda })\r\n            }) \r\n        }\r\n    });\r\n\r\n\r\n    return (\r\n        <div className=\"App\">\r\n            <ReactiveButton state={current} onClick={() => send('CLICK')} />\r\n        </div>\r\n    )\r\n};\r\n\r\n\r\n\r\n/* RASA API\r\n *  */\r\nconst proxyurl = \"https://cors-anywhere.herokuapp.com/\";\r\nconst rasaurl = 'https://guess-the-intent.herokuapp.com/model/parse'\r\nconst nluRequest = (text: string) =>\r\n    fetch(new Request(proxyurl + rasaurl, {\r\n        method: 'POST',\r\n        headers: { 'Origin': 'http://maraev.me' }, // only required with proxy\r\n        body: `{\"text\": \"${text}\"}`\r\n        })\r\n        )\r\n        .then(data => data.json());\r\n\r\nconst rootElement = document.getElementById(\"root\");\r\nReactDOM.render(\r\n    <App />,\r\n    rootElement);\r\n"],"sourceRoot":""}